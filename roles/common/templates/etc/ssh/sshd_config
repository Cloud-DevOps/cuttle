# {{ ansible_managed }}

# Package generated configuration file
# See the sshd_config(5) manpage for details

# What ports, IPs and protocols we listen for
{% if groups['bastion'] is defined and inventory_hostname in groups['bastion'] %}
Port {{ bastion.ssh_port }}
{% else %}
Port 22
{% endif %}
# Use these options to restrict which interfaces/protocols sshd will bind to
#ListenAddress ::
#ListenAddress 0.0.0.0
Protocol 2
# HostKeys for protocol version 2
HostKey /etc/ssh/ssh_host_rsa_key
HostKey /etc/ssh/ssh_host_dsa_key
HostKey /etc/ssh/ssh_host_ecdsa_key
HostKey /etc/ssh/ssh_host_ed25519_key
#Privilege Separation is turned on for security
UsePrivilegeSeparation yes

# Lifetime and size of ephemeral version 1 server key
KeyRegenerationInterval 3600
ServerKeyBits 1024

# Logging
SyslogFacility AUTH
LogLevel INFO

# Authentication:
LoginGraceTime 120
PermitRootLogin {{ common.ssh.permit_root_login }}
StrictModes yes

RSAAuthentication yes
PubkeyAuthentication yes
AuthorizedKeysFile {% if _users.manage_authorized_keys|bool %}/etc/ssh/authorized_keys/%u.keys{% else %}.ssh/authorized_keys{% endif %}

# Don't read the user's ~/.rhosts and ~/.shosts files
IgnoreRhosts yes
# For this to work you will also need host keys in /etc/ssh_known_hosts
RhostsRSAAuthentication no
# similar for protocol version 2
HostbasedAuthentication no
# Uncomment if you don't trust ~/.ssh/known_hosts for RhostsRSAAuthentication
#IgnoreUserKnownHosts yes

# To enable empty passwords, change to yes (NOT RECOMMENDED)
PermitEmptyPasswords no

# Change to yes to enable challenge-response passwords (beware issues with
# some PAM modules and threads)
{% if groups['bastion'] is defined and inventory_hostname in groups['bastion'] %}
{% if twofa.enabled|bool and twofa.method == "google"  %}
AuthenticationMethods publickey,keyboard-interactive
ChallengeResponseAuthentication yes
{% else %}
ChallengeResponseAuthentication no
{% endif %}{% endif %}

# Kerberos options
#KerberosAuthentication no
#KerberosGetAFSToken no
#KerberosOrLocalPasswd yes
#KerberosTicketCleanup yes

# GSSAPI options
#GSSAPIAuthentication no
#GSSAPICleanupCredentials yes

X11Forwarding yes
X11DisplayOffset 10
PrintMotd yes
PrintLastLog yes
TCPKeepAlive yes
#UseLogin no

MaxAuthTries 15
MaxStartups 100
MaxSessions {{ common.ssh.max_sessions }}
#Banner /etc/issue.net

# Allow client to pass locale environment variables
#AcceptEnv
PermitUserEnvironment no
GatewayPorts no

Subsystem sftp /usr/lib/openssh/sftp-server

Ciphers aes128-ctr,aes192-ctr,aes256-ctr
MACs hmac-sha1,hmac-ripemd160

# Set this to 'yes' to enable PAM authentication, account processing,
# and session processing. If this is enabled, PAM authentication will
# be allowed through the ChallengeResponseAuthentication and
# PasswordAuthentication.  Depending on your PAM configuration,
# PAM authentication via ChallengeResponseAuthentication may bypass
# the setting of "PermitRootLogin without-password".
# If you just want the PAM account and session checks to run without
# PAM authentication, then enable this but set PasswordAuthentication
# and ChallengeResponseAuthentication to 'no'.
UsePAM yes
{% if common.ssh.disable_dns %}
UseDNS no
{% else %}
UseDNS yes
{% endif %}
GSSAPIAuthentication no
PasswordAuthentication no

# Send keep-alives and disconnect inactive clients after 30 minutes
ClientAliveInterval {{ common.ssh.client_alive.interval }}
ClientAliveCountMax {{ common.ssh.client_alive.countmax }}

{% if groups['bastion'] is defined and inventory_hostname in groups['bastion'] %}
# The remaining values are exclusive to Bastion hosts

AllowAgentForwarding yes
{% if bastion.force_commands | length > 0 %}
{% if bastion.backdoor_user %}
# Backdoor for {{ bastion.backdoor_user }} user
Match User *,!{{ bastion.backdoor_user }}
{% else %}
Match User *
{% endif %}
  ForceCommand {{ bastion.force_commands | join(" ") }}
{% endif %}
{% endif %}

{% if common.ssh.github_authorized_keys.enabled | bool %}
AuthorizedKeysCommand      /usr/local/bin/github_authorized_keys.py
AuthorizedKeysCommandUser  nobody
{% endif %}
